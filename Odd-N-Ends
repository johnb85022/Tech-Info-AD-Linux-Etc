
Reminder, WireShark cap filters ARE not the same syntax as display filters. 
https://wiki.wireshark.org/CaptureFilters#examples
One I like, 
net 10.10.10.20 or 10.10.10.21 
THis one makes reading flows easy, 
not broadcast and not multicast

I like this regex for IP sets
grep -E "[[:space:]][[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+"


A number of INET sources use the MC ending, this tr can help, simple fast.
# use tr to clean the file from dos to unix
tr -d '\r' < "$NRD_DOMAINS" > "$CLEAN_DOMAINS"

Some times a just want clean data. The <> killed the html lines, 
cat placeholder.txt  |tr -d "[:blank:]" |tr -d '\r'|tr '[:upper:]' '[:lower:]' |grep -v -e "^$" -e "[><]" > fooroo

Date from ansible , ansible_date_time to see all formats, etc. 
---
- name: display date
  hosts: dnshosteast001
  tasks:
    - debug: var=ansible_date_time.iso8601

Use find to look at the proc pid tables , this example the VmSawp size used. 
find /proc/*/status -exec cat {} \; |grep -e '^Pid:' -e VmSwap

useing pidof to look in detail at a set of pids of a name, pidstat can to the same, this is 
just another way to dig out details.
pidof bash |xargs ps -up

Handy use of grep , are the two files the same ? Note the order of the file names really changes things. 
grep -vFxf yesterday.txt today.txt 

Use file yesterday as the point of ref, the regeg to seek in the today file, in a way showing what has been added in to the
today set. 
grep -vFxf yesterday.txt today.txt

What file and what line number we are talking about, the -n and -H are handy when debuging grep options. 
grep -nHvFxf yesterday.txt today.txt

If I flip the files, then I can see what has been dropped from today. 
grep -vFxf today.txt yesterday.txt

Handy tcpdumps I like.
Good Web ref for tcpdump 
https://danielmiessler.com/study/tcpdump/

Examaple of filtering out stuff. -c helps to stop it if I forget.
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -c 99999

Can help us to see details of the protocols. 
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -vv 

Will try to open the packets and show us ASCCI 
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -vv -A 

Simple watch this one IP to see the flows. 
tcpdump -vv -i ens128 'host 10.10.10.10' 

What day is it? Silly fun, not bad syntax examples. 
::::::::::::::
friday-yet.sh
::::::::::::::
date "+%A" |grep -q "Fri" && ( cowsay -f tux "$(date "+%A") YES"|lolcat -p 1 -F .01 -a ) || cowsay $(date "+%D %A")
::::::::::::::
friday.yet.sh
::::::::::::::
date |grep -q -e "Fri" && ( echo "FRIDAY" |cowsay|lolcat ) || echo no|cowsay|lolcat

Handy nslookup option in windows nslookup, then do a zone.com. lookup, get you all the zone NS servers details. 
set querytype=all 

Ever just wanted the inventory as a list, JQ helps, then I just tossed the rest over the side. 
[ansible@srv005 ~]$ foo=$(ansible-inventory --list |jq '.[].hosts|values' |tr ',' ' '|tr -d '[]' |tr '\n' ' '|tr -s ' '|tr -d '"')

Bling all the keys for the known hosts , drop context to the .ssh/know_hosts, bypass the need to edit the sshd options. 
[ansible@srv005 ~]$ for x in $foo; do  echo $x ; ssh-keyscan $x ;done


[ansible@srv005 ~]$ for x in $foo; do  echo $x ; ssh-keyscan $x ;done

Handy DNS info, 
See para 4.1.  RFC 1918 Zones
https://github.com/johnb85022/Tech-Info-AD-Linux-Etc/blob/master/Syslog-Ng%20remote.conf

Major BL listing ...
https://www.opendbl.net/


...

