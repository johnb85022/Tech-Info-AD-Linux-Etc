
HowTo JQ, hand example, good url , 
https://linuxconfig.org/how-to-parse-a-json-file-from-linux-command-line-using-jq
	read nsg 
	jq .records[0].time 2021.05.15.NSG-123-890-XYZ.json
	jq '.records[] | .properties.flows' sample.json
	jq -r '.records[].time,.records[].macAddress' sample.json
	? jack pot ?
	jq -r '.records[] | "\(.properties.flows)"' sample.json
	jq -r '.records[] | "\(.properties.flows)"' sample.json |grep -E -o -e '["]mac["][:]["][[:digit:]]+["]'
	jq -r '.records[] | "\(.properties.flows)"' sample.json |grep -E -o -e '["]mac["][:]["][[:digit:]]+["][,]["]flowTuples["][:][[].*\]\}\]\}\]'
	jq -r '.records[] | "\(.time)"' sample.json
	jq -r '.records[] | "\(.properties.flows)"' sample.json

Greping a BIG file, help it makes it so much faster, handy with big files... 
export LC_ALL=C

Win DNS , Getting some spec info out of the logs , 
my pattern_sting was a NX domain for a spec host name, reminder the MS log is (NUMBER)STRING format,
then I reduced it to just the Snd query reply, who asked for that name in the first place. 

Get-Content  C:\windows\system32\LogFiles\dns.log| select-string -Pattern "$pattern_string"|Select-String -Pattern 'Snd' |Out-GridView 

Few of the DNS logs peeks that I like, 

$pattern_string="NXDOMAIN"
Get-Content  C:\windows\system32\LogFiles\dns.log| select-string -Pattern "$pattern_string" | Select-String -Pattern 'Rcv'|Out-GridView 
Get-Content  C:\windows\system32\LogFiles\dns.log| select-string -Pattern "$pattern_string" | Select-String -Pattern 'PTR'|Out-GridView 
# Just a sample 
get-content -Tail 1500 C:\windows\system32\LogFiles\dns.log | Out-GridView
# How many of a thing
Get-Content  C:\windows\system32\LogFiles\dns.log| select-string -Pattern "$pattern_string" | Select-String -Pattern 'PTR'| Measure-Object â€“Line|Out-GridView
# fast ugly 
Get-Content -ReadCount 100 C:\windows\system32\LogFiles\dns.log

When installer is odd about not useing the whole disk, Ubuntu, Linux , LVM , 
Tested, even when the disk is root file system. See if some space is free
then extend to that free space. 

vgdisplay
lvdisplay
lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
df -h
resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
df -h

Remember HOST keys are not user keys , some simple commands to help

ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa
ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa

This can be used to collect info the known_hosts file. 
ssh-keyscan HOSTNAME 

Very good and simple json to csv py script. Good py example. Node is the name of the array at the very start of the json stream. 
https://github.com/vinay20045/json-to-csv/blob/master/json_to_csv.py

JQ has a -j option that can help sending flows to a shell pipe , its a work 
around , but can be good for a limited number of fields. 
jq -j '.[]._source.layers.frame'  pcap.json |grep frame.len |head -n2

Export only the stub from the MS DNS with powershell, note the filter -eq Stub
# CSV !! 
get-DnsServerZone  |Where-Object -Property ZoneType -eq "Stub" |Select-Object Zonename|Get-DnsServerZone|select-object Zonename,zonetype, MasterServers  |export-csv -path .\mycsv.txt

Loop over the STUB export , test the name lookup and record details
# A loop from simple input.txt file.
write-host $ARGS[0]
$a = @()
$a = Get-Content $ARGS[0]

$a|ForEach-Object {
$var=$($_)
#Some-cmd $var

$temp = $var -replace '"',''
# write-host $temp
$zonename=$temp.split(",")[0]
# write-host $zonename
$dnshost=$temp.split(",")[2].split(' ')[0]
# write-host $dnshost

## write-host "$zonename $dnshost"
$answer=$(resolve-dnsname $zonename -server $dnshost -QuickTimeout -ErrorAction SilentlyContinue )

#write-host "$zonename $dnshost" $answer| measure-object -Character
write-host "$zonename $dnshost" $answer.length


}


Short and long domain names , good data cleaner , the tr -d '\r' helps a lot 
grep -v -E "\S+[.]\S+[.]\S+" placeholder.txt |tr -s ' ' |tr -d ' ' |tr -d '\r' |tr '[:upper:]' '[:lower:]' |grep -v -e "^$" -e "[><]" |sort -ud > set.short.txt
grep -E "\S+[.]\S+[.]\S+" placeholder.txt |cut -d '.' -f2,3 |tr -s ' ' |tr -d ' ' | tr -d '\r' |tr '[:upper:]' '[:lower:]' | grep -v -e "^$" -e "[><]" | sort -ud > set.long.txt

  
https://linux.die.net/man/1/grep
[:alnum:], [:alpha:], [:cntrl:], [:digit:], [:graph:], [:lower:], [:print:], [:punct:], [:space:], [:upper:],
and [:xdigit:]. For example, [[:alnum:]] means [0-9A-Za-z],

Reminder, DNS record types info, 
https://en.wikipedia.org/wiki/List_of_DNS_record_types
The type number can be used in wireshark dns.qry.type == '#' , display filters, 

Reminder, WireShark cap filters ARE not the same syntax as display filters. 
https://wiki.wireshark.org/CaptureFilters#examples
One I like, 
net 10.10.10.20 or 10.10.10.21 
This one makes reading flows easy, 
not broadcast and not multicast
To see only DNS , display filter, 
dns
Capture only dns, 
port 53
Display filtyer for unk answers, 
dns.flags == 0x8183
Query only DNS, 
dns.flags.response == 0
SOA only, 
dns.query.type == 6 
PTR only, handy when fixing up REV zone 
dns.qry.type == 12 

Tcpdump each way to filter out our own SSH session
tcpdump 'port not 22' 
tcpdump 'port not 22' -w mydump.pcap 

I like this regex for IP sets
grep -E "[[:space:]][[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+"


A number of INET sources use the MC ending, this tr can help, simple fast.
# use tr to clean the file from dos to unix
tr -d '\r' < "$NRD_DOMAINS" > "$CLEAN_DOMAINS"

Some times a just want clean data. The <> killed the html lines, 
cat placeholder.txt  |tr -d "[:blank:]" |tr -d '\r'|tr '[:upper:]' '[:lower:]' |grep -v -e "^$" -e "[><]" > fooroo

Date from ansible , ansible_date_time to see all formats, etc. 
---
- name: display date
  hosts: dnshosteast001
  tasks:
    - debug: var=ansible_date_time.iso8601

Use find to look at the proc pid tables , this example the VmSawp size used. 
find /proc/*/status -exec cat {} \; |grep -e '^Pid:' -e VmSwap

useing pidof to look in detail at a set of pids of a name, pidstat can to the same, this is 
just another way to dig out details.
pidof bash |xargs ps -up

Handy use of grep , are the two files the same ? Note the order of the file names really changes things. 
grep -vFxf yesterday.txt today.txt 

Use file yesterday as the point of ref, the regeg to seek in the today file, in a way showing what has been added in to the
today set. 
grep -vFxf yesterday.txt today.txt

What file and what line number we are talking about, the -n and -H are handy when debuging grep options. 
grep -nHvFxf yesterday.txt today.txt

If I flip the files, then I can see what has been dropped from today. 
grep -vFxf today.txt yesterday.txt

Handy tcpdumps I like.
Good Web ref for tcpdump 
https://danielmiessler.com/study/tcpdump/

Examaple of filtering out stuff. -c helps to stop it if I forget.
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -c 99999

Can help us to see details of the protocols. 
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -vv 

Will try to open the packets and show us ASCCI 
tcpdump '( (not arp) and (not port 22) and ( not port 68) )' -vv -A 

Simple watch this one IP to see the flows. 
tcpdump -vv -i ens128 'host 10.10.10.10' 

What day is it? Silly fun, not bad syntax examples. 
::::::::::::::
friday-yet.sh
::::::::::::::
date "+%A" |grep -q "Fri" && ( cowsay -f tux "$(date "+%A") YES"|lolcat -p 1 -F .01 -a ) || cowsay $(date "+%D %A")
::::::::::::::
friday.yet.sh
::::::::::::::
date |grep -q -e "Fri" && ( echo "FRIDAY" |cowsay|lolcat ) || echo no|cowsay|lolcat

Handy nslookup option in windows nslookup, then do a zone.com. lookup, get you all the zone NS servers details. 
set querytype=all 

Ever just wanted the inventory as a list, JQ helps, then I just tossed the rest over the side. 
[ansible@srv005 ~]$ foo=$(ansible-inventory --list |jq '.[].hosts|values' |tr ',' ' '|tr -d '[]' |tr '\n' ' '|tr -s ' '|tr -d '"')

Bling all the keys for the known hosts , drop context to the .ssh/know_hosts, bypass the need to edit the sshd options. 
[ansible@srv005 ~]$ for x in $foo; do  echo $x ; ssh-keyscan $x ;done


[ansible@srv005 ~]$ for x in $foo; do  echo $x ; ssh-keyscan $x ;done

Handy DNS info, 
See para 4.1.  RFC 1918 Zones
https://github.com/johnb85022/Tech-Info-AD-Linux-Etc/blob/master/Syslog-Ng%20remote.conf

Major BL listing ...
https://www.opendbl.net/

Looking for a PTR record SOA? Odd task but can help map out DNS , etc. 
Resolve-DnsName 18.0.20.172.in-addr.arpa. -Server 10.91.8.11



...

